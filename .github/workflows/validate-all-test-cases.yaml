name: Validate All Test Cases
on:
  workflow_dispatch: # Allows for manual triggering
  push:
    paths:
      - '**.xml' # Triggers on any XML file changes in any directory
      - '**/v[0-9]*/**.xml' 
      - '.github/workflows/**' # Temporary as we test
    branches:
      - main # Triggers on push to main and its own branch
      - validatingAllTestCases
  pull_request:  # Trigger on a pr to main 
    branches:
      - main
    paths:
      - '**.xml'
      - '**/v[0-9]*/**.xml'
      - '.github/workflows/**'

permissions: 
  contents: write
  pages: write

jobs:
  validate-xml:
    runs-on: ubuntu-latest
    env:
      SCRIPTING_LICENSE_KEY: ${{ secrets.SCRIPTING_LICENSE_KEY }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download and setup Oxygen XML Scripting
      run: |
        echo "Setting up Oxygen XML Scripting..."
        mkdir scripting
        cd scripting
        wget -q https://www.oxygenxml.com/InstData/Editor/All/oxygen.tar.gz
        tar -xzf oxygen.tar.gz
        rm oxygen.tar.gz
        echo "${{ secrets.SCRIPTING_LICENSE_KEY }}" > oxygen/scriptinglicensekey.txt
        echo "Oxygen XML Scripting setup complete."
      shell: bash

    - name: Run XML Validation and Generate Reports
      id: validation # Added ID for reference in other steps
      continue-on-error: true # Allow workflow to continue even if this fails
      run: |
        echo "Starting XML Validation process..."

        # Set up paths
        WORKSPACE="${GITHUB_WORKSPACE}"
        OXYGEN_SCRIPTS="${WORKSPACE}/scripting/oxygen/scripts"
        REPORT_DIR="validation-reports" 
        mkdir -p "$REPORT_DIR"
        
        # Initialize main report file with timestamp and header
        {
          echo "XML Validation Report"
          echo "===================="
          echo "Generated on: $(date)"
          echo
        } > "${REPORT_DIR}/validation_report.txt"
        
        total_files_processed=0
        total_files_with_problems=0
        total_problems_found=0
        
        # Process each utility
        for util in AGR CEI CHG LBR NFG NGG PLI; do
          if [ -d "$util" ]; then
            echo "Processing $util..."
            
            TEMP_DIR="temp_validation_${util}"
            mkdir -p "$TEMP_DIR"
            cp -r "$util" "$TEMP_DIR/"
            
            # Run validation for this utility
            echo "Validating $util files..."
            "${OXYGEN_SCRIPTS}/validate.sh" "$TEMP_DIR/$util" \
              -if "*.xml" \
              -ef "**/v0.9/*.xml" \
              -ed ".svn,.git" \
              -rf "${REPORT_DIR}/temp_report_${util}.txt" \
              -rft "txt" || true
            
            # Process utility results
            if [ -f "${REPORT_DIR}/temp_report_${util}.txt" ]; then
              {
                echo
                echo "=== Results for $util ==="
                echo "-------------------------"
                
                # Extract and format the problems section
                sed -n '/FILES WITH VALIDATION PROBLEMS/,/^$/p' "${REPORT_DIR}/temp_report_${util}.txt" | \
                  grep "FILE:" | \
                  sed -E "s|.*/temp_validation_${util}/${util}/|${util}/|g" || echo "No validation problems found"
                
                echo
              } >> "${REPORT_DIR}/validation_report.txt"
              
              # Update totals
              files=$(grep "files verified in total" "${REPORT_DIR}/temp_report_${util}.txt" | grep -o "[0-9]\+" || echo "0")
              problems_files=$(grep "files reported with validation problems" "${REPORT_DIR}/temp_report_${util}.txt" | grep -o "[0-9]\+" || echo "0")
              problems=$(grep "problems found on aggregate" "${REPORT_DIR}/temp_report_${util}.txt" | grep -o "[0-9]\+" || echo "0")
              
              total_files_processed=$((total_files_processed + files))
              total_files_with_problems=$((total_files_with_problems + problems_files))
              total_problems_found=$((total_problems_found + problems))
              
              rm "${REPORT_DIR}/temp_report_${util}.txt"
            fi
            rm -rf "$TEMP_DIR"
          fi
        done
        
        # Create summary report that shows total problem count for each utility
        {
          echo "Validation Summary Report"
          echo "======================="
          echo "Generated on: $(date)"
          echo
          echo "Overall Statistics:"
          echo "-----------------"
          echo "Total files processed: $total_files_processed"
          echo "Total files with problems: $total_files_with_problems"
          echo "Total problems found: $total_problems_found"
          echo
          echo "Problems by Utility:"
          echo "------------------"
          
          for util in AGR CEI CHG LBR NFG NGG PLI; do
            problems_count=$(grep -c "^${util}/" "${REPORT_DIR}/validation_report.txt" || echo "0")
            if [ "$problems_count" -gt 0 ]; then
              echo "$util: $problems_count file(s) with problems"
            fi
          done
        } > "${REPORT_DIR}/summary.txt"
        
        # Output the counts for next steps
        echo "total_problems=$total_problems_found" >> $GITHUB_OUTPUT
        echo "total_problem_files=$total_files_with_problems" >> $GITHUB_OUTPUT
        
        # Show summary in the workflow log
        cat "${REPORT_DIR}/summary.txt"
        
        # Store validation status but don't exit yet
        validation_failed=0
        if [ "$total_problems_found" -gt 0 ]; then
          echo "::error::Validation failures detected: $total_problems_found problems in $total_files_with_problems files"
          validation_failed=1
        fi
        
        # Save validation status for next steps
        echo "validation_failed=$validation_failed" >> $GITHUB_OUTPUT

    - name: Upload validation reports
      if: always() # This will ensures that it runs regardless of previous step status since it keeps exiting
      uses: actions/upload-artifact@v3
      with:
        name: validation-reports
        path: validation-reports # Upload all files in this directory
    

    - name: Deploy validation reports to branch
      if: always()
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        TEMP_DIR="temp_reports"
        mkdir -p "$TEMP_DIR"
        cp validation-reports/validation_report.txt "$TEMP_DIR/" || true
        cp validation-reports/summary.txt "$TEMP_DIR/" || true
        
        git fetch
        if git show-ref --quiet refs/remotes/origin/test-case-validation-reports; then
          git checkout test-case-validation-reports
        else
          git checkout --orphan test-case-validation-reports
          git rm -rf .
        fi
        
        cp -r "$TEMP_DIR"/* . || true
        git add validation_report.txt summary.txt || true
        git commit -m "Update validation reports [skip ci]" || echo "No changes to commit"
        git push -f origin test-case-validation-reports

    - name: Check Validation Results
      if: always()
      run: |
        if [ "${{ steps.validation.outputs.validation_failed }}" == "1" ]; then
          echo "::error::Validation failed with ${{ steps.validation.outputs.total_problems }} problems in ${{ steps.validation.outputs.total_problem_files }} files"
          exit 1
        else
          echo "âœ… Validation passed - no problems found"
        fi

    - name: Deploy validation reports to branch
      if: always()
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        TEMP_DIR="temp_reports"
        mkdir -p "$TEMP_DIR"

        # Copy reports (use || true to prevent failures if files don't exist)
        cp validation-reports/validation_report.txt "$TEMP_DIR/" || true
        cp validation-reports/summary.txt "$TEMP_DIR/" || true
        
        git fetch
        if git show-ref --quiet refs/remotes/origin/test-case-validation-reports; then
          git checkout test-case-validation-reports
        else
          git checkout --orphan test-case-validation-reports
          git rm -rf .
        fi
        
        # Update and push the reports
        cp -r "$TEMP_DIR"/* . || true
        git add validation_report.txt summary.txt || true
        git commit -m "Update validation reports [skip ci]" || echo "No changes to commit"
        git push -f origin test-case-validation-reports
